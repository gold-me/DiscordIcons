/* PROPERTIES */
:root {
    container: root;
}

@property --si-size {
	syntax: "<length>";
	inherits: true;
	initial-value: 24px;
}
@property --si-height {
	syntax: "<length>";
	inherits: true;
	initial-value: 32px;
}
@property --si-gap {
	syntax: "<length>";
	inherits: true;
	initial-value: 10px;
}
@property --si-animations {
	syntax: "true | false";
	inherits: true;
	initial-value: true;
}
@property --si-expand {
	syntax: "true | false";
	inherits: true;
	initial-value: false;
}
@property --si-permacolor {
	syntax: "true | false";
	inherits: true;
	initial-value: false;
}
@property --si-color {
	syntax: "<color>";
	inherits: true;
	initial-value: currentColor;
}
@property --si-opacity {
	syntax: "<number>";
	inherits: true;
	initial-value: 0.4;
}
@property --si-opacity-hover {
	syntax: "<number>";
	inherits: true;
	initial-value: 0.8;
}

@each $i, $u in $miscSettingsIcons {
  @property --si-#{str-replace($i, '-&-', '')} {
    syntax: "<url>";
    inherits: true;
    initial-value: url(#{$u});
  }
}

@each $i, $u in $userSettingsIcons {
  @property --si-#{str-replace($i, '-&', '')} {
    syntax: "<url>";
    inherits: true;
    initial-value: url(#{$u});
  }
}

@each $i, $u in $serverSettingsIcons {
  @property --si-#{str-replace($i, '-&', '')} {
    syntax: "<url>";
    inherits: true;
    initial-value: url(#{$u});
  }
}

@each $i, $u in $channelSettingsIcons {
  @property --si-#{str-replace($i, '-&', '')} {
    syntax: "<url>";
    inherits: true;
    initial-value: url(#{$u});
  }
}

// SettingsIcons Parity Fix
:root {
	/* SettingsIcons Parity */
	@each $i, $u in $miscSettingsIcons {
		@if str-index($i, '_') {
				--si-#{str-replace($i, '_', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
		@if str-index($i, '-') {
				--si-#{str-replace(str-replace($i, '-', ''), '&', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
	}
	@each $i, $u in $userSettingsIcons {
		@if str-index($i, '_') {
				--si-#{str-replace($i, '_', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
		@if str-index($i, '-') {
			--si-#{str-replace(str-replace($i, '-', ''), '&', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
	}
	@each $i, $u in $serverSettingsIcons {
		@if str-index($i, '_') {
				--si-#{str-replace($i, '_', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
		@if str-index($i, '-') {
			--si-#{str-replace(str-replace($i, '-', ''), '&', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
	}
	@each $i, $u in $channelSettingsIcons {
		@if str-index($i, '_') {
				--si-#{str-replace($i, '_', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
		@if str-index($i, '-') {
			--si-#{str-replace(str-replace($i, '-', ''), '&', '')}: var(--si-#{str-replace($i, '-&', '')});
		}
	}
}

// COLORS
:root {
  /* Exhaustive List of Colors: */
  @each $i, $u in $userSettingsIcons {
    @if in_map($presetColors, $i) {
      --si-color-#{str-replace($i, '-&', '')}: #{map_get($presetColors, $i)};
    } @else {
      --si-color-#{str-replace($i, '-&', '')}: var(si-color);
    }
  }
  @each $i, $u in $serverSettingsIcons {
    @if in_map($presetColors, $i) {
      --si-color-#{str-replace($i, '-&', '')}: #{map_get($presetColors, $i)};
    } @else {
      --si-color-#{str-replace($i, '-&', '')}: var(si-color);
    }
  }
  @each $i, $u in $channelSettingsIcons {
    @if in_map($presetColors, $i) {
      --si-color-#{str-replace($i, '-&', '')}: #{map_get($presetColors, $i)};
    } @else {
      --si-color-#{str-replace($i, '-&', '')}: var(si-color);
    }
  }
}